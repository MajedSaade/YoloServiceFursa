name: YoloService Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      EC2_SSH_KEY:
        required: true
      YOLO_EC2_HOST_DEV:
        required: true
      EC2_USERNAME:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.YOLO_EC2_HOST_DEV }} >> ~/.ssh/known_hosts

      - name: Create deployment directory and copy files
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.YOLO_EC2_HOST_DEV }} "mkdir -p ~/yoloservice-deploy"
          scp -i ~/.ssh/id_rsa docker-compose.dev.yaml ${{ secrets.EC2_USERNAME }}@${{ secrets.YOLO_EC2_HOST_DEV }}:~/yoloservice-deploy/docker-compose.yml

      - name: Deploy to EC2
        run: |
          IMG_NAME=majedsaade${{ inputs.image }}
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.YOLO_EC2_HOST_DEV }} << EOF

          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker \$USER
          fi

          # Navigate to deployment directory
          cd ~/yoloservice-deploy

          # Cleanup old yolo.service
          echo "Cleaning up old yolo.service..."
          sudo systemctl disable --now yolo.service || true
          sudo rm -f /etc/systemd/system/yolo.service || true
          sudo systemctl daemon-reload

          # Create environment file
          cat > .env << EOL
          IMG_NAME=majedsaade${{ inputs.image }}
          ENVIRONMENT=development
          STATUS_SERVER_PORT=8081
          EOL

          # Debug info
          echo "=== Deployment Debug Info ==="
          echo "Image from build workflow: \$IMG_NAME"
          echo "Contents of .env file:"
          cat .env
          echo "Contents of docker-compose.yml:"
          cat docker-compose.yml
          echo "=== End Debug Info ==="

          # Stop existing containers
          sudo docker compose down --remove-orphans || true

          # Login to Docker Hub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

          # Pull latest image and start services
          sudo -E docker compose pull
          sudo -E docker compose up -d

          # Cleanup old images
          sudo docker image prune -f

          echo "Deployment completed successfully!"
          EOF
